# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aBO8HFmSYJu83hFH47yM72ffF-9KWto4
"""

# 📦 Importando bibliotecas necessárias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 📂 Carregando a planilha (atualize o caminho se necessário)
df = pd.read_excel("tabela_cartao_credito_ok.xlsx")

# Lista com os nomes das colunas de valor da fatura
bill_features = ['BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']

# Lista com os nomes das colunas de valor do pagamento
pay_features = ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']

print("Características de valor da fatura:")
print(bill_features)

print("\nCaracterísticas de valor do pagamento:")
print(pay_features)

print("\n📊 Estatísticas descritivas - Valores da fatura:")
print(df[bill_features].describe())

# 👉 Reflita: os valores fazem sentido? Há muitos outliers? Algum valor negativo inesperado?

# Criando uma figura com subplots organizados em 2 linhas por 3 colunas
fig, axes = plt.subplots(2, 3, figsize=(15, 8))

# Flatten a matriz de eixos para facilitar o loop
axes = axes.flatten()

# Loop para plotar cada histograma
for i, column in enumerate(bill_features):
    axes[i].hist(df[column], bins=20, color='skyblue', edgecolor='black')
    axes[i].set_title(f'Histograma de {column}')
    axes[i].set_xlabel('Valor')
    axes[i].set_ylabel('Frequência')

plt.tight_layout()
plt.show()

print("📊 Estatísticas descritivas - Valores de pagamento:")
print(df[pay_features].describe())

# 👉 Reflita: muitos valores são zero? Há outliers? Algum padrão?

# Criando gráfico com 2 linhas por 3 colunas
fig, axes = plt.subplots(2, 3, figsize=(15, 8))
axes = axes.flatten()

for i, column in enumerate(pay_features):
    axes[i].hist(df[column], bins=20, color='lightgreen', edgecolor='black')
    axes[i].set_title(f'Histograma de {column}')
    axes[i].set_xlabel('Valor')
    axes[i].set_ylabel('Frequência')
    axes[i].tick_params(axis='x', rotation=45)  # Rotacionando os rótulos

plt.tight_layout()
plt.show()

# Criando uma máscara booleana: True se o pagamento for zero
zero_mask = df[pay_features] == 0

# Contando quantos valores são zero em cada coluna
print("\n🔍 Contagem de valores iguais a zero em cada PAY_AMT:")
print(zero_mask.sum())

# 👉 Esse resultado reflete o que vimos nos histogramas do exercício 5?

# Criando nova máscara para filtrar apenas valores maiores que 0
nonzero_payments = df[pay_features] > 0

# Criando um novo DataFrame com os valores log-transformados (apenas onde > 0)
log_transformed = df[pay_features].where(nonzero_payments).apply(np.log10)

# Plotando histogramas log-transformados
fig, axes = plt.subplots(2, 3, figsize=(15, 8))
axes = axes.flatten()

for i, column in enumerate(pay_features):
    axes[i].hist(log_transformed[column].dropna(), bins=20, color='salmon', edgecolor='black')
    axes[i].set_title(f'Log10 de {column}')
    axes[i].set_xlabel('log10(valor)')
    axes[i].set_ylabel('Frequência')
    axes[i].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

